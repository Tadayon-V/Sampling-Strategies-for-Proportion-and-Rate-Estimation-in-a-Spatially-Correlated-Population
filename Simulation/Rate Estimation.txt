rm(list = ls())
library(ggplot2)
library(ggthemes)
library(raster)
N <- 500




set.seed(11)
#============================= Make a raster
My.area = raster(xmn=0, ymn=0, xmx=10, ymx=10, res=1)

My.area[] <- 0
pts <- spsample(as(extent(My.area), 'SpatialPolygons'), N, 'random')
tab <- table(cellFromXY(My.area, pts))
My.area[as.numeric(names(tab))] <- tab

# x11()
plot(My.area, col=gray.colors(9, start=0.9, end=0.3),
     cex.axis=1.5, cex.lab=2,
     #col=heat.colors(9, alpha=0.9, rev=TRUE),
     xlab="x" , ylab="y", legend.only=FALSE,
     legend.width=1, legend.shrink=0.8,
     legend.args=list(text='Count', side=4, font=2, line=2.5, cex=1),
     axis.args=list(cex.axis=1.2))
points(pts, pch=20)


count.da <- data.frame("cntr"=coordinates(My.area),
                       "count"=My.area[])
head(count.da); dim(count.da)



pts.df <- data.frame(pts)
#View(pts.df)
names(pts.df) <- c("x","y")
head(pts.df); dim(pts.df)

pts.df <- cbind(extract(My.area, pts.df, cellnumbers=T),pts.df)
head(pts.df); dim(pts.df)

drops <- c("ID","layer")
pts.df <- pts.df[ , !(names(pts.df) %in% drops)]
head(pts.df); dim(pts.df)






#=================================NORMMH
### Computing of the norm matrix: |h|
NORMMH <- function(coordinate){
  NMH <- as.matrix(dist(coordinate))
  return(NMH)
}
normmatrix <- NORMMH(coordinates(pts))
class(normmatrix); dim(normmatrix)

expocorr <- function(normmatrix, rho){
  M <- exp(-(normmatrix/rho))
  c <- c(min(M[lower.tri(M)][order(-row(M)[lower.tri(row(M))])]),
         max(M[lower.tri(M)][order(-row(M)[lower.tri(row(M))])]))
  return(c)
}
expocorr(normmatrix,4)










#=================================Auto-Correlation
library(rgeos)
library(rgdal)
shape <- rasterToPolygons(My.area, dissolve=F)



#=================================Distance between centroids
library(spatstat)
centroids <- count.da[,1:2]

# x11()
plot(My.area, col=gray.colors(9, start=0.9, end=0.3),
     cex.axis=1.5, cex.lab=2,
     #col=heat.colors(9, alpha=0.9, rev=TRUE),
     xlab="x" , ylab="y", legend.only=FALSE,
     legend.width=1, legend.shrink=0.8,
     legend.args=list(text='Count', side=4, font=2, line=2.5, cex=1),
     axis.args=list(cex.axis=1.2))
points(centroids,pch=19)

dist.centr <- crossdist(centroids$cntr.x, centroids$cntr.y,
                        centroids$cntr.x, centroids$cntr.y)
class(dist.centr); dim(dist.centr); #diag(dist.centr)


ar.cnt <- function(unit){
  areal <- pts.df[frst.unt,1]
  center <- count.da[areal,1:2]
  return(center)
}





















library(geoR)
library(sp) 


st.date <- date()

#================================= Test Loop of Simulation
R = 300
n.dust = 15
m.dust.samp <- c(0)
m.srs.samp <- c(0)

count.da1 <- count.da[-row(count.da)[count.da == 0],]




x.norm <- rnorm(N,0.8,1)
V <- grf(n=N, cov.model="exponential", cov.pars=c(0.1, 3),
         grid=coordinates(pts), mean=1+0.5*x.norm)
expV <- exp(V$data)
Z <- rpois(n=N, lambda=expV)
# plot(density(Z)) ; mean(Z) ; mean(Z)/N

###
pts.df[,4] <- Z



# 
# # # #======================= The Loop
# # # 
# # #   ##################################################################
# # #   #--------------------------divide districts
# # #   divi.pts <- by(pts.df, pts.df$cells, function(unique) unique)
# # #   distr.samp <- list()
# # #   districts.mean <- c(0)
# # #   for (j in 1:length(divi.pts)){   # ==> number of non-empty cellls
# # #     distr.samp[[j]] <- as.vector(as.matrix(divi.pts[[j]][,(4)]))
# # #     districts.mean[j] <- mean(distr.samp[[j]])
# # #   }
# # #   ##################################################################
# # #   #--------------------------neighbor district
# # #   Omega <- gTouches(shape, byid=TRUE)
# # #   Omega <- 1*Omega
# # #   #------------indices of non zero elements
# # #   # which(Omega!=0, arr.ind=T)
# # #   denominator <- var(districts.mean)*8/9
# # #   #denominator <- (1/9)*sum((districts.mean-mean(districts.mean))^2)
# # #   S.sum <- 0
# # #   for(k in 1:9){
# # #     for(l in 1:9){
# # #       if(k!=l){
# # #         S.sum <- S.sum +
# # #           Omega[k,l]*(districts.mean[k]-mean(districts.mean))*
# # #           ((districts.mean[l]-mean(districts.mean)))
# # #       }
# # #     }
# # #   }
# # #   numerator <- S.sum/sum(Omega)
# # #   auto.corr <- abs(numerator/denominator)
# # #   ##################################################################
# # #   #=================================Dependent Unit Sequential Technique
# # #   frst.unt <- sample(x=c(1:N), 1)
# # #   frst.areal <- pts.df[frst.unt,1]
# # #   frst.cntr <- ar.cnt(frst.unt)
# # #   sampled <- c(frst.areal)
# # #   CTR <- 2
# # #   while(length(unique(sampled)) < n.dust){
# # #     cntrdis <- crossdist(
# # #       count.da[sampled[CTR-1],]$cntr.x,
# # #       count.da[sampled[CTR-1],]$cntr.y,
# # #       count.da1$cntr.x, count.da1$cntr.y
# # #     )
# # #     # dim(cntrdis)
# # #     cntrdis <- as.vector(cntrdis)
# # #     ###
# # #     sampled[CTR] <- order(cntrdis)[length(divi.pts)-CTR]
# # #     # as.numeric(as.character(names(divi.pts)))
# # #     ###
# # #     CTR  <- CTR + 1
# # #   }
# # #   # sum(1*duplicated(sampled))
# # #   sampled <- unique(sampled)
# # #   ##################################################################
# # #   #================================= DUST Estimation
# # #   # dust.list <- list()
# # #   # for (shom  in sampled){
# # #   #   # print(shom)
# # #   #   dust.list[[shom]] <- divi.pts[[shom]][,4:(3+R)]
# # #   # }
# # #   # dust.list <- Filter(Negate(is.null), dust.list)
# # #   # dust.samp <- Reduce(c, dust.list)
# # #   # m.dust.samp[i] <- mean(dust.samp) # + runif(1,-0.04,(pr-mean(dust.samp)))
# # #   m.dust.samp[i] <- mean(districts.mean[sampled])
# # #   ##################################################################
# # #   #================================= SRS Estimation
# # #   rand <- sample(1:N, (sum(count.da[sampled,3])/10))
# # #   srs.samp <- pts.df[rand,]
# # #   srs.samp <- as.vector(as.matrix(srs.samp[,(4)]))
# # #   m.srs.samp[i] <- mean(srs.samp)
# # #   ##################################################################
# # #   #================================= Print R
# # #   print(i)
# # # 
# # 
# 
#   
  
  


en.date <- date()





st.date
en.date







# save.image()







# os.shutdown()
























